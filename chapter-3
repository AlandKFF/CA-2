<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chapter 3: Structure Concepts Summary</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f9f9f9;
      color: #333;
    }
    h1, h2 {
      text-align: center;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background-color: #fff;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px 12px;
      text-align: left;
    }
    th {
      background-color: #e2e2e2;
    }
    .section {
      margin-bottom: 40px;
    }
  </style>
</head>
<body>
     <nav>
    <ul style="list-style-type: none; padding: 0; text-align: center; background-color: #00539C; margin-bottom: 20px;">
        <li style="display: inline; margin-right: 20px;">
            <a href="/CA-2/chapter-1.html" style="color: white; text-decoration: none;">Chapter 1</a>
        </li>
        <li style="display: inline; margin-right: 20px;">
            <a href="/CA-2/index.html" style="color: white; text-decoration: none;">Chapter 2</a>
        </li>
        <li style="display: inline;">
            <a href="/CA-2/chapter-3.html" style="color: white; text-decoration: none;">Chapter 3</a>
        </li>
    </ul>
</nav>


  <h1>Chapter 3: Structure Concepts Summary</h1>

  <!-- 1. Instruction Cycle -->
  <div class="section">
    <h2>1. Instruction Cycle</h2>
    <table>
      <tr>
        <th>Component</th>
        <th>Sub-components</th>
        <th>Key Details</th>
      </tr>
      <tr>
        <td rowspan="2">Instruction Cycle</td>
        <td><strong>Fetch</strong></td>
        <td>
          - <strong>Program Counter (PC):</strong> Holds the address of the next instruction.<br>
          - <strong>Instruction Register (IR):</strong> Receives the fetched instruction.<br>
          - PC is incremented after fetching (unless altered by control operations).
        </td>
      </tr>
      <tr>
        <td><strong>Execute</strong></td>
        <td>
          - Involves various operations:<br>
          &nbsp;&nbsp;• <strong>I/O operations:</strong> Data transfer between CPU and peripherals.<br>
          &nbsp;&nbsp;• <strong>ALU (Arithmetic/Logic) operations:</strong> Perform calculations and logical operations.<br>
          &nbsp;&nbsp;• <strong>Memory operations:</strong> Data transfer between CPU and RAM.<br>
          &nbsp;&nbsp;• <strong>Control operations:</strong> Change the sequence of operations (e.g., jump instructions).
        </td>
      </tr>
    </table>
  </div>

  <!-- 2. Interrupts -->
  <div class="section">
    <h2>2. Interrupts</h2>
    <table>
      <tr>
        <th>Component</th>
        <th>Sub-components</th>
        <th>Key Details</th>
      </tr>
      <tr>
        <td rowspan="3">Interrupts</td>
        <td><strong>Types</strong></td>
        <td>
          - <strong>Program Interrupts:</strong> e.g., division by zero, overflow.<br>
          - <strong>Timer Interrupts:</strong> Generated by an internal processor timer (used in pre-emptive multitasking).<br>
          - <strong>I/O Interrupts:</strong> From I/O controllers (e.g., keyboard, disk).<br>
          - <strong>Hardware Interrupts:</strong> Due to hardware failures (e.g., memory parity errors).
        </td>
      </tr>
      <tr>
        <td><strong>Interrupt Cycle</strong></td>
        <td>
          - Added to the instruction cycle; the CPU checks for an interrupt signal.<br>
          - If an interrupt is detected:<br>
          &nbsp;&nbsp;• Suspend current program execution.<br>
          &nbsp;&nbsp;• Save the current context.<br>
          &nbsp;&nbsp;• Set PC to the interrupt handler start address.<br>
          &nbsp;&nbsp;• Process the interrupt.<br>
          &nbsp;&nbsp;• Restore context and resume the program.
        </td>
      </tr>
      <tr>
        <td><strong>Techniques</strong></td>
        <td>
          - <strong>Disabling Interrupts:</strong> CPU ignores new interrupts until the current one is processed.<br>
          - <strong>Prioritization:</strong> Higher-priority interrupts preempt lower-priority ones.
        </td>
      </tr>
    </table>
  </div>

  <!-- 3. Connection -->
  <div class="section">
    <h2>3. Connection</h2>
    <table>
      <tr>
        <th>Component</th>
        <th>Sub-components</th>
        <th>Key Details</th>
      </tr>
      <tr>
        <td>CPU</td>
        <td>N/A</td>
        <td>
          - Reads instructions and data, writes processed data.<br>
          - Sends control signals to other units.<br>
          - Receives and acts on interrupts.
        </td>
      </tr>
      <tr>
        <td>RAM (Memory)</td>
        <td>N/A</td>
        <td>
          - Receives and sends data and addresses.<br>
          - Handles control signals for read, write, and timing.
        </td>
      </tr>
      <tr>
        <td>I/O Devices</td>
        <td>N/A</td>
        <td>
          - Similar to memory in data transfer functions.<br>
          - <strong>Output:</strong> CPU sends data to peripherals.<br>
          - <strong>Input:</strong> Peripherals send data to CPU.<br>
          - Receives addresses and control signals (e.g., port numbers, disk commands).<br>
          - Sends interrupt signals to the CPU.
        </td>
      </tr>
    </table>
  </div>

  <!-- 4. BUS -->
  <div class="section">
    <h2>4. BUS</h2>
    <table>
      <tr>
        <th>Aspect</th>
        <th>Sub-components / Types</th>
        <th>Key Details</th>
      </tr>
      <tr>
        <td rowspan="3"><strong>Key Characteristics</strong></td>
        <td>Broadcast Nature</td>
        <td>A bus is a communication pathway that broadcasts data to multiple devices.</td>
      </tr>
      <tr>
        <td>Grouped Channels</td>
        <td>Consists of multiple channels (e.g., a 32-bit bus has 32 individual channels).</td>
      </tr>
      <tr>
        <td>Physical Representation</td>
        <td>Appears as parallel lines, ribbon cables, or strip connectors (e.g., PCI).</td>
      </tr>
      <tr>
        <td rowspan="3"><strong>Bus Types</strong></td>
        <td>Data Bus</td>
        <td>Carries data; width (8, 16, 32, 64 bits) determines transfer capacity.</td>
      </tr>
      <tr>
        <td>Address Bus</td>
        <td>Carries addresses; its width sets the maximum memory capacity (e.g., 16-bit gives 65,536 addresses).</td>
      </tr>
      <tr>
        <td>Control Bus</td>
        <td>Carries control and timing signals (e.g., read/write signals, clock signals, interrupts).</td>
      </tr>
      <tr>
        <td rowspan="2"><strong>Bus Structure</strong></td>
        <td>Single Bus</td>
        <td>One common bus for all devices; may suffer from propagation delays and congestion.</td>
      </tr>
      <tr>
        <td>Multiple Buses</td>
        <td>Separate buses alleviate congestion and improve performance.</td>
      </tr>
      <tr>
        <td rowspan="2"><strong>Bus Configurations</strong></td>
        <td>Dedicated</td>
        <td>Separate lines for data and addresses; simpler control but requires more wiring.</td>
      </tr>
      <tr>
        <td>Multiplexed</td>
        <td>Shared lines for data and addresses with control signals to differentiate; uses fewer physical lines but needs complex control.</td>
      </tr>
    </table>
  </div>

</body>
</html>
